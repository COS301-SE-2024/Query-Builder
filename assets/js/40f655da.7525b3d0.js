"use strict";(self.webpackChunkquery_builder_docs=self.webpackChunkquery_builder_docs||[]).push([[6828],{9497:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>n,metadata:()=>a,toc:()=>o});var i=t(6070),s=t(5710);const n={sidebar_position:4},l="Architectural Styles and Patterns",a={id:"architectural-requirements/architectural-patterns",title:"Architectural Styles and Patterns",description:"Architectural Patterns are well-known compositions of architectural elements which allow a system to effectively meet its quality requirements.",source:"@site/docs/architectural-requirements/architectural-patterns.md",sourceDirName:"architectural-requirements",slug:"/architectural-requirements/architectural-patterns",permalink:"/Query-Builder/docs/architectural-requirements/architectural-patterns",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Architectural Strategies/Tactics",permalink:"/Query-Builder/docs/architectural-requirements/architectural-strategies"},next:{title:"Design Patterns",permalink:"/Query-Builder/docs/architectural-requirements/design-patterns"}},c={},o=[{value:"Some common architectural patterns which address QBee&#39;s top 5 quality requirements",id:"some-common-architectural-patterns-which-address-qbees-top-5-quality-requirements",level:2},{value:"Usability",id:"usability",level:3},{value:"Security",id:"security",level:3},{value:"Scalability",id:"scalability",level:3},{value:"Performance",id:"performance",level:3},{value:"Reliability",id:"reliability",level:3},{value:"Selected Architectural Patterns for QBee",id:"selected-architectural-patterns-for-qbee",level:2},{value:"Model-View-Controller (MVC)",id:"model-view-controller-mvc",level:3},{value:"Layered",id:"layered",level:3},{value:"Microservices",id:"microservices",level:3}];function d(e){const r={em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"architectural-styles-and-patterns",children:"Architectural Styles and Patterns"}),"\n",(0,i.jsx)(r.p,{children:"Architectural Patterns are well-known compositions of architectural elements which allow a system to effectively meet its quality requirements."}),"\n",(0,i.jsx)(r.h2,{id:"some-common-architectural-patterns-which-address-qbees-top-5-quality-requirements",children:"Some common architectural patterns which address QBee's top 5 quality requirements"}),"\n",(0,i.jsx)(r.h3,{id:"usability",children:"Usability"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Model-View-Controller (MVC)"}),"\n",(0,i.jsx)(r.li,{children:"Client-Server"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"security",children:"Security"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Microkernel"}),"\n",(0,i.jsx)(r.li,{children:"Layered"}),"\n",(0,i.jsx)(r.li,{children:"Model-View-Controller (MVC)"}),"\n",(0,i.jsx)(r.li,{children:"Pipe-and-Filter"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"scalability",children:"Scalability"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Microservices"}),"\n",(0,i.jsx)(r.li,{children:"Service-oriented Architecture (SOA)"}),"\n",(0,i.jsx)(r.li,{children:"Blackboard"}),"\n",(0,i.jsx)(r.li,{children:"Space-based"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"performance",children:"Performance"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Service Mesh"}),"\n",(0,i.jsx)(r.li,{children:"Load Balancer"}),"\n",(0,i.jsx)(r.li,{children:"Throttling"}),"\n",(0,i.jsx)(r.li,{children:"Map Reduce"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"reliability",children:"Reliability"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Process Pairs"}),"\n",(0,i.jsx)(r.li,{children:"Triple Modular Redundancy (TMR)"}),"\n",(0,i.jsx)(r.li,{children:"Passive Redundancy (Warm Spare)"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"selected-architectural-patterns-for-qbee",children:"Selected Architectural Patterns for QBee"}),"\n",(0,i.jsx)(r.h3,{id:"model-view-controller-mvc",children:"Model-View-Controller (MVC)"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsxs)(r.em,{children:["The Model-View-Controller architectural pattern allows for the separation of software business logic from the user interface. A user uses the ",(0,i.jsx)(r.strong,{children:"controller"})," to manipulate the ",(0,i.jsx)(r.strong,{children:"model"}),", which is an internal representation of the software's information. The ",(0,i.jsx)(r.strong,{children:"model"})," then updates the ",(0,i.jsx)(r.strong,{children:"view"}),", which is the user interface that the user sees and which displays the information to the user."]})}),"\n",(0,i.jsxs)(r.p,{children:["This is an ideal pattern to design QBee's frontend interface. For example, QBee's input classes are ",(0,i.jsx)(r.strong,{children:"controllers"})," which can be used by the user to manipulate QBee's 'intermediate form' of query representation, which represents a ",(0,i.jsx)(r.strong,{children:"model"})," of query information. This ",(0,i.jsx)(r.strong,{children:"model"})," then updates the ",(0,i.jsx)(r.strong,{children:"views"})," that the user sees, which include the ",(0,i.jsx)(r.em,{children:"other"})," inputs, and query results and reports."]}),"\n",(0,i.jsx)(r.h3,{id:"layered",children:"Layered"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"The layered architectural pattern arranges a software system into distinct layers, with each layer responsible for its own functionality. This ensures separation of concerns and modularisation of code"})}),"\n",(0,i.jsx)(r.p,{children:"This is an ideal pattern to structure QBee's entire stack of technologies. Our presentation layer consists of our frontend progressive web app (PWA), whilst our business logic layer consists of our API and server-side application. Lastly, QBee will effectively make use of two persistence layers - our own data store to store user data and queries, as well as the data stores that can be connected by users to the app for querying."}),"\n",(0,i.jsx)(r.h3,{id:"microservices",children:"Microservices"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"The microservices architectural pattern arranges a software system as a loosely-coupled collection of granular services, allowing for high scalability and maintainability"})}),"\n",(0,i.jsx)(r.p,{children:'This is an ideal pattern to design QBee\'s various services, such as querying, reporting and user management. They can run as separate "micro-apps" communicating through lightweight interfaces.'})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5710:(e,r,t)=>{t.d(r,{R:()=>l,x:()=>a});var i=t(758);const s={},n=i.createContext(s);function l(e){const r=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(n.Provider,{value:r},e.children)}}}]);